Anleitung zur Installation:

==============================================
               Voraussetzungen
==============================================

Mindestanforderungen:
Linux-OS (root)
gcc
make
ld
nginx
fcgiwrap
mysql-server
libmysqlclient-dev
curl
bash
Internetzugang

Zum Bearbeiten der Software und Erledigen zusätzlicher Aufgaben nützlich:
vim (sollte installiert sein)
geany (Text Editor)
codeblocks (C C++ usw. IDE)
codeblocks-contrib (Plugins (u.a. ENV-Varibales) für codeblocks)
ufw (Konfigurationsassistent für die Firewall)
dnsutils (Werkzeuge für dns)

==============================================
                  Anleitung
==============================================
Alle Befehle müssen im selben Verzeichnis wie diese Anleitung ausgeführt werden,
sofern die Ordnerstruktur des Git-Repositories beibehalten wird.

1. Pakete installieren & Zusätzliche Dateiei herunterladen

	Für die Mindestanforderungen:
	sudo apt-get update
	sudo apt-get upgrade
	sudo apt-get install libmysqlclient-dev mysql-server nginx bash gcc

	Für Zusätzliche Dinge:
	sudo apt-get install geany codeblocks codeblocks-contrib ufw dnsutils

	Des weiteren wird eine Datei von jquery benötigt:
	wget -O ./html/js/jquery.js http://code.jquery.com/jquery-1.11.3.min.js

2. Software Konfigurieren
	Die für die Konfiguration des nginx-Webservers, des fcgiwrappers
	und des mysqlservers erforderlichen Dateien befinden sich im
	Ordner "./etc" parallel zu diesem Dokument und müssen in den entsprechenden 
	"etc" Ordner des zu konfigurierenden Systems kopiert werden.

	cp ./etc/nginx/fastcgi_params /etc/nginx/fastcgi_params
	cp ./etc/nginx/fcgiwrap.conf /etc/nginx/fcgiwrap.conf
	cp ./etc/nginx/nginx.conf /etc/nginx/nginx.conf
	cp ./etc/nginx/sites-available/default /etc/nginx/sites-available/default
	cp ./etc/mysql/my.cnf /etc/mysql/my.cnf
	
	Die für de Firewall erforderlichen Regeln lauten wie folgt.

	[ 1] 443/tcp                    ALLOW IN    Anywhere
	[ 2] 80/tcp                     ALLOW IN    Anywhere
	[ 3] 22/tcp                     ALLOW IN    <nach Bedarf>

	Um https nutzen zu können muss ein ssl-Zertifikat bereitgestellt werden.
	--> Selbst eines erzeugen, z. B. mit:
	https://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-nginx-for-ubuntu-14-04	
	
	<aus Datei ./etc/nginx/sites-available/default>
	[...]
	ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
	[...]

3. Dateien Kopieren
	Den Inhalt des Ordners ./html (html-, css-, js- usw. Dateien) rekursiv (mit allen Unterordnern)
	in das Hauptverzeichnis des nginx-Servers kopieren 
	(nach derzeitiger Konfiguration: /usr/share/nginx/html)

	Die mysql-Datenbank erzeugen und mihilfe des "mysqldump" ./mysql_base/base5.sql
	die Struktur der Datenbank herstellen

	echo "CREATE DATABASE base5" | mysql -p -u root
	mysql -p -u root base5 < ./mysql_base/base5.sql

	Nachdem die Datenbank in ihrer Struktur hergestellt ist müssen noch die nötigen Benutzer
	und deren Rechte angelegt bzw. eingestellt werden.

	echo "CREATE USER 'web_user'@'localhost' IDENTIFIED BY 'web_pass'" | mysql -p -u root
	(!!! Am Ende wird das Problem mit dem Passwort anders gelöst !!!)
	(!!!         DIESES PASSWORT IST NUR ZU TESTZWECKEN          !!!)
	echo "GRANT SELECT,INSERT,DELETE,UPDATE on base5.* TO 'web_user'@'localhost'" | mysql -p -u root	

4. (optional) Skripte ausführen
	Da für dieses Projekt die Anschaffung eines Dienstes wie noIP, dynDNS usw. unnötig erschien
	gibt es eine einfache Lösung für das Problem einer ständig wechselnden, öffentlichen IP-Adresse.
	(https://de.wikipedia.org/wiki/Zwangstrennung)
	
	Ein kleines Skript (./skripte/update_ip.sh) das jede Stunde ausgeführt wird
	(es kann sein, dass die Internetverbindung auch mal zwischendurch getrennt wird,
	nicht unbeding immer zum sleben Zeitpunkt (z.B. um 02:00:00 UTC))
	ermittelt die derzeitige IP-Adresse und schreibt diese in eine Datei im Ordner /tmp.
	In der nginx-Konfiguration ist diese Datei eingebunden.

	<./etc/nginx/sites-available/default>
	[...]
	include /tmp/server_name.txt;
	[...]

	</tmp/server_name.txt>
	server_name <ermittelte öffentliche IP>;

	Dies ist deshalb erforderlich, damit ein Aufrufer von jedem Ort aus "https://<öffentliche IP>/"
	aufrufen kann, und sich die Einstellung nach der Zwangstrennung entsprechend anpasst.

	Damit das Skript ausgeführt werden kann muss es an einen beliebigen Ort kopiert werden,
	an dem es nicht gelöscht wird. (z.B.: ~/Skripte/update_ip.sh)

	Damit man zusätzlich noch die Möglichkeit hat die IP des Servers aus dem Internet herauszufinden 
	kann diese durch ein zweites Skript, z.B. auf GoogleDrive hochgeladen, oder per mail
	an die Interessierten geschickt werden. 

	Um die Skripte automatisch jede Stunde auszuführen kann man cron verwenden.
	Dazu unter einem Benutzer mit genügend Rechten "crontab -e" aufrufen und folgende Zeilen an das Ende
	der Datei anhängen:

	0 * * * * ~/Skripte/update_ip.sh

	Da nginx die Konfiguration nur beim Starten liest, muss diese Programm ebenfalls neugestarten werden
	Dafür als root einloggen (sudo -i oder su) und wieder mit "crontab -e" die cron-Tabelle editieren

	5 * * * * service nginx --full-restart
	(5 Deshalb, da das herausfinden der öffentlichen IP-Adresse mit der derzeitigen Methode
	manchmal durchaus länger dauern kann)

5. (Optional) C-Programme kompilieren
	Falls die schon kompilierten Programme in ./html/cgi-bin/ nicht ausführbar sind
	(CPU Architektur usw. passt nicht) müssen diese neu kompiliert werden.
	Dazu eignet sich die Entwicklungsumgebung codeblocks
	oder das Makefile.

	Für die Kompilierung mit dem make file müssen allerdings noch 2 Ordner erstellt werden.

	mkdir bin .objs bin/Debug

	Danach kann mit
	"make <entsprechendes Ziel>"
	ein ausführbares Programm erstellt werden.
	Sinvoll bei einer Erstinstallation ist allerdings der Aufruf

	make all
	

Um die Installation abzuschließen müssen der HTTP- und SQL-Server neu gestartet werden.

sudo service nginx --full-restart
sudo service fcgiwrap --full-restart
sudo service mysql --full-restart
